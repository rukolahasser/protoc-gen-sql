package sqlgen

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"testing"
)

const (
	dbConnection = "host=localhost port=5432 user=postgres password=password database=blep_test"
)

var expectedUpSqlContent = `-- Code generated by protoc-gen-sql. Feel free to modify it as you see fit.

CREATE TABLE IF NOT EXISTS "eva.asuka.2_2_2.randomcontract.petersilie" (
    ns TEXT NOT NULL,
    s TEXT NOT NULL,
    "ts" TIMESTAMPTZ NOT NULL,
    "typeint32" INT4,
    "typeuint64" INT8,
    "typebyte" BYTEA,
    "typeuint256" NUMERIC(78,0),
    "typearray" INT4[],
    "typein8" INT2,
    "typeuin8" INT2,
    "typeint16" INT2,
    "typeuint16" INT4,
    "typeuint32" INT8,
    "typeint64" INT8
);
CREATE INDEX ON "eva.asuka.2_2_2.randomcontract.petersilie" ("typeuint256");
CREATE INDEX ON "eva.asuka.2_2_2.randomcontract.petersilie" ("typeuin8");
CREATE INDEX ON "eva.asuka.2_2_2.randomcontract.petersilie" ("typeuint16");
CREATE INDEX ON "eva.asuka.2_2_2.randomcontract.petersilie" ("typeint64");

`

var (
	sqlDir     string
	binDir     string
	testDir    string
	testTmpDir string
	pluginDir  string
	//db         *database.Database
)

func setUp() {
	wd, err := os.Getwd()
	if err != nil {
		log.Fatal("failed to get current working directory")
	}
	testDir = filepath.Join(wd, "../testdata")
	testTmpDir = filepath.Join(testDir, "tmp2")
	sqlDir = filepath.Join(testTmpDir, "sql")
	binDir = filepath.Join(testTmpDir, "bin")
	pluginDir = filepath.Join(wd, "../cmd/protoc-gen-sql")

	err = os.MkdirAll(sqlDir, 0777)
	if err != nil {
		log.Fatal("failed to setup directory")
	}

	err = os.MkdirAll(binDir, 0777)
	if err != nil {
		log.Fatal("failed to setup directory")
	}

	cmd := exec.Command(
		"go",
		"build", "-o", binDir, pluginDir,
	)
	if err = cmd.Run(); err != nil {
		log.Fatal("failed to build protoc-gen-sql")
	}

	//db = connectToDB()
}

//func connectToDB() *database.Database {
//	conn, err := database.New(dbConnection)
//	if err != nil {
//		log.Fatal("Timescaledb connection failed")
//	}
//	return conn
//}

func cleanUp() {
	//db.Close()
	err := os.RemoveAll(testTmpDir)
	if err != nil {
		log.Fatal("failed to cleanup directory")
	}
}

func TestMain(m *testing.M) {
	setUp()
	exitCode := m.Run()
	cleanUp()
	os.Exit(exitCode)
}

func Test_ExecSQLGenerator(t *testing.T) {
	ExecSQLGenerator(sqlDir, binDir, "dummy2_test_index", "asuka", "eva", "RandomContract", "2_2_2", fmt.Sprintf("%s/proto/", testDir), "dummy2.proto")

	content, err := ioutil.ReadFile(fmt.Sprintf("%s/dummy2_test_index.up.sql", sqlDir))
	if err != nil {
		t.Fatalf("failed to read .sql: %v", err)
	}

	if string(content) != expectedUpSqlContent {
		t.Fatalf("content doesn't match")
	}
}

//
//func Test_CreateTablesFromSQLFile(t *testing.T) {
//	CreateTablesFromSQLFile(db, fmt.Sprintf("%s/dummy2_test_index.up.sql", sqlDir))
//
//	_, err := db.Exec(context.Background(), "select 1 from \"eva.asuka.2_2_2.randomcontract.petersilie\"")
//	if err != nil {
//		t.Fatalf("failed to select from table: %v", err)
//	}
//}
