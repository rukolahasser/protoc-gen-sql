package sqlgen

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"regexp"
	"strings"
)

const (
	tab                = "    "
	comma              = ","
	goTimeStampType    = "Timestamp"
	unsupportedTypeAlt = "text"
)

// GenerateTableCreationFile generates a sql file for migrate up.
func GenerateTableCreationFile(gen *protogen.Plugin, file *protogen.File, fileName string) {
	if fileName == "" {
		fileName = file.GeneratedFilenamePrefix
	}

	fileName = fileName + ".sql"
	g := gen.NewGeneratedFile(fileName, file.GoImportPath)
	g.P("-- Code generated by protoc-gen-sql. Feel free to modify it as you see fit.")
	g.P()
	genCreateTables(g, file)
}

func genCreateTables(g *protogen.GeneratedFile, file *protogen.File) {
	for _, msg := range file.Messages {
		tn := genTableName(file, msg)
		g.P("CREATE TABLE IF NOT EXISTS ", "\"", tn, "\"", " (")
		//genDefaultCols(g)
		genTableContent(g, msg)
		g.P(");")
		genIndices(g, msg, tn)
		g.P()
	}
}

func genIndices(g *protogen.GeneratedFile, msg *protogen.Message, tn string) {
	for _, field := range msg.Fields {
		if checkLeadingComment(field) {
			g.P("CREATE INDEX ON ", "\"", tn, "\"", " (", "\"", field.Desc.Name(), "\"", ");")
		}
	}
}

func genTableContent(g *protogen.GeneratedFile, msg *protogen.Message) {
	for i, field := range msg.Fields {
		if i < len(msg.Fields)-1 {
			g.P(tab, "\"", field.Desc.Name(), "\"", " ", fieldSqlType(g, field), comma)
		} else {
			g.P(tab, "\"", field.Desc.Name(), "\"", " ", fieldSqlType(g, field))
		}
	}
}

func genTableName(file *protogen.File, msg *protogen.Message) string {
	path := strings.Trim(string(file.GoImportPath), "\"")
	path = strings.ReplaceAll(path, "/", ".")

	path = strings.Trim(path, ".")

	fs := "%s.%s"

	return strings.ToLower(fmt.Sprintf(fs, path, msg.GoIdent.GoName))
}

// fieldSqlType returns the Go type used for a field.
func fieldSqlType(g *protogen.GeneratedFile, field *protogen.Field) (sqlType string) {
	sqlType = checkTrailingComment(field)
	if sqlType != "" {
		return sqlType
	}

	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		sqlType = "boolean"
	case protoreflect.EnumKind:
		sqlType = unsupportedTypeAlt
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		sqlType = "int4"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		sqlType = "int8"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		sqlType = "int8"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		sqlType = "int8"
	case protoreflect.FloatKind:
		sqlType = "float4"
	case protoreflect.DoubleKind:
		sqlType = "float8"
	case protoreflect.StringKind:
		sqlType = "text"
	case protoreflect.BytesKind:
		sqlType = "bytea"
	case protoreflect.MessageKind:
		goType := g.QualifiedGoIdent(field.Message.GoIdent)
		if strings.Contains(goType, goTimeStampType) {
			sqlType = "timestamptz NOT NULL"
		} else {
			sqlType = unsupportedTypeAlt
		}
	}
	switch {
	case field.Desc.IsList():
		return sqlType + "[]"
	case field.Desc.IsMap():
		sqlType = unsupportedTypeAlt
	}
	return sqlType
}

func checkLeadingComment(field *protogen.Field) bool {
	lc := field.Comments.Leading

	return strings.Contains(string(lc), "index")
}

func checkTrailingComment(field *protogen.Field) string {
	tc := field.Comments.Trailing

	if tc == "" {
		return ""
	}
	bits, unsigned := getBits(string(tc))
	return bitsToNumeric(bits, unsigned)
}

func getBits(comment string) (string, bool) {
	idx := strings.Index(comment, "int")
	if idx == -1 {
		return "", false
	}
	unsigned := false
	if idx == 0 || comment[idx-1:idx] == "u" {
		unsigned = true
	}
	re := regexp.MustCompile("[0-9]+")
	bits := re.FindString(comment[idx:])

	return bits, unsigned
}

func bitsToNumeric(bits string, unsigned bool) string {
	switch bits {
	case "256":
		return "NUMERIC(78,0)"
	case "248":
		return "NUMERIC(75,0)"
	case "240":
		return "NUMERIC(73,0)"
	case "232":
		return "NUMERIC(70,0)"
	case "224":
		return "NUMERIC(68,0)"
	case "216":
		return "NUMERIC(66,0)"
	case "208":
		return "NUMERIC(63,0)"
	case "200":
		return "NUMERIC(61,0)"
	case "192":
		return "NUMERIC(58,0)"
	case "184":
		return "NUMERIC(56,0)"
	case "176":
		return "NUMERIC(53,0)"
	case "168":
		return "NUMERIC(51,0)"
	case "160":
		return "NUMERIC(49,0)"
	case "152":
		return "NUMERIC(46,0)"
	case "144":
		return "NUMERIC(44,0)"
	case "136":
		return "NUMERIC(41,0)"
	case "128":
		return "NUMERIC(39,0)"
	case "120":
		return "NUMERIC(37,0)"
	case "112":
		return "NUMERIC(34,0)"
	case "104":
		return "NUMERIC(32,0)"
	case "96":
		return "NUMERIC(29,0)"
	case "88":
		return "NUMERIC(27,0)"
	case "80":
		return "NUMERIC(25,0)"
	case "72":
		return "NUMERIC(22,0)"
	case "40", "48", "56", "64":
		return "int8"
	case "32":
		if unsigned {
			return "int8"
		}
		return "int4"
	case "24":
		return "int4"
	case "16":
		// uint16 maps to int4 in postgres
		if unsigned {
			return "int4"
		}
		return "int2"
	case "8":
		return "int2"
	default:
		return ""
	}
}
