package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"testing"
)

var expectedUpSqlContent = `-- Code generated by protoc-gen-sql. Feel free to modify it as you see fit.

CREATE TABLE IF NOT EXISTS "rukolahasser.test.mymessage" (
    "ts" timestamptz NOT NULL,
    "type_int32" int4,
    "type_uint64" int8,
    "type_bytes" bytea,
    "type_uint256" NUMERIC(78,0),
    "type_array" int4[],
    "type_in8" int2,
    "type_uin8" int2,
    "type_int16" int2,
    "type_uint16" int4,
    "type_uint32" int8,
    "type_int64" int8
);
CREATE INDEX ON "rukolahasser.test.mymessage" ("type_bytes");

`

var (
	sqlDir     string
	binDir     string
	testDir    string
	testTmpDir string
)

func setUp() {
	wd, err := os.Getwd()
	if err != nil {
		log.Fatal("failed to get current working directory")
	}
	testDir = filepath.Join(wd, "../../testdata")
	testTmpDir = filepath.Join(testDir, "tmp")
	sqlDir = filepath.Join(testTmpDir, "sql")
	binDir = filepath.Join(testTmpDir, "bin")

	err = os.MkdirAll(sqlDir, 0777)
	if err != nil {
		log.Fatal("failed to setup directory")
	}

	err = os.MkdirAll(binDir, 0777)
	if err != nil {
		log.Fatal("failed to setup directory")
	}
}

func cleanUp(t *testing.T) {
	t.Cleanup(func() {
		err := os.RemoveAll(testTmpDir)
		if err != nil {
			t.Fatal("failed to cleanup directory")
		}
	})
}

func Test_protoGenUpSql(t *testing.T) {
	setUp()
	defer cleanUp(t)

	cmd := exec.Command(
		"go",
		"build", "-o", binDir, ".",
	)
	if err := cmd.Run(); err != nil {
		t.Errorf("failed to build protoc-gen-sql")
	}

	cmd = exec.Command(
		"protoc",
		fmt.Sprintf("--sql_out=%s", sqlDir), fmt.Sprintf("--plugin=%s/protoc-gen-sql", binDir),
		"--sql_opt=paths=source_relative,file=dummy",
		fmt.Sprintf("--proto_path=%s/proto", testDir),
		"dummy.proto",
	)

	var stderr bytes.Buffer
	cmd.Stderr = &stderr
	if err := cmd.Run(); err != nil {
		t.Fatalf("failed generating sql file: %v", stderr.String())
	}

	fmt.Println("sqlDir ", sqlDir)

	content, err := ioutil.ReadFile(fmt.Sprintf("%s/dummy.sql", sqlDir))
	if err != nil {
		t.Fatalf("failed to read .sql: %v", err)
	}

	if string(content) != expectedUpSqlContent {
		t.Fatalf("content doesn't match")
	}
}
